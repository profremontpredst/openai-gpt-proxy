import express from "express";
import cors from "cors";
import fetch from "node-fetch";
import dotenv from "dotenv";

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json({ limit: "1mb" }));

// === KEYS & WEBHOOKS ===
const OPENAI_KEY = process.env.OPENAI_KEY;
if (!OPENAI_KEY) {
  console.error("‚ùå OPENAI_KEY is missing in env");
}

const GOOGLE_SHEET_WEBHOOK_LEAD  = process.env.GS_LEAD_URL  || "https://script.google.com/macros/s/AKfycbyk3j-_HkOqtHblLpqmjwEsfcTqVQCUvINbHtMur3lHywzKIz1brHJEOWvQXSQV3i9uVg/exec";
const GOOGLE_SHEET_WEBHOOK_LOGS  = process.env.GS_LOGS_URL  || "https://script.google.com/macros/s/AKfycbwjw69VW-8l0_Sb-1-vXMVF1gRUeOVpQoxzpVsAuS5ZLWrdu3HPa_CAX8Oq0mHTYBbG/exec";
const BITRIX_LEAD_URL            = process.env.BITRIX_LEAD_URL || "https://b24-jddqhi.bitrix24.ru/rest/1/3xlf5g1t6ggm97xz/crm.lead.add.json";

// === SYSTEM PROMPTS (–æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ–∏ —Ç–µ–∫—Å—Ç—ã) ===
const SYSTEM_PROMPT_TEXT = `
–¢—ã ‚Äî –ê–Ω–Ω–∞, –ø–æ–º–æ—â–Ω–∏–∫ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ. –ü–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–Ω—è—Ç—å, –∑–∞—á–µ–º –Ω—É–∂–µ–Ω —á–∞—Ç-–±–æ—Ç –Ω–∞ —Å–∞–π—Ç–µ. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å, –∫–∞–∫ –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è, —Ä–∞–±–æ—Ç–∞—Ç—å —Å CRM, –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏, —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏.

–ü–∏—à–∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, —Ç–µ–ø–ª–æ –∏ –ø—Ä–æ—Å—Ç–æ. –û–±—â–∞–π—Å—è –∂–∏–≤–æ, –±—É–¥—Ç–æ —Ç—ã —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –ë–µ–∑ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å—â–∏–Ω—ã. –ë—É–¥—å –ø–æ–ª–µ–∑–Ω–æ–π, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π.

–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—è–≤–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å, —Å–ø—Ä–æ—Å–∏–ª —Ü–µ–Ω—É, —Å–ø—Ä–æ—Å–∏–ª –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –∫–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è ‚Äî –≤—Å—Ç–∞–≤—å [openLeadForm] –∏ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –ø—Ä—è–º–æ —Ç—É—Ç, –∞ –≤—ã –≤—Å—ë –ø–æ–∫–∞–∂–µ—Ç–µ –∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ.

–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å—Ç–∞–≤–∏–ª–∞ [openLeadForm], –±–æ–ª—å—à–µ –ø—Ä–æ —Ñ–æ—Ä–º—É –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.
`;

const SYSTEM_PROMPT_VOICE = `
–¢—ã ‚Äî –ê–Ω–Ω–∞, –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, —è—Å–Ω–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π SSML –∏ –ª—é–±—ã–µ —Ç–µ–≥–∏ (<...>), –≥–æ–≤–æ—Ä–∏ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º. –î–æ–±–∞–≤–ª—è–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—É–∑—ã –º–Ω–æ–≥–æ—Ç–æ—á–∏—è–º–∏ –∏ —Ç–∏—Ä–µ. –ù–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –±–æ—Ç.
–¢–æ–Ω: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –ø–æ–º–æ–≥–∞—é—â–∏–π. –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã.
`;

const SYSTEM_PROMPT_PIZZA = `
–¢—ã ‚Äî –ê–Ω–Ω–∞ üçï, –≤–µ—Å—ë–ª–∞—è –ø–æ–¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ "–ü–∏—Ü—Ü–∞ –ø–æ –∫–∞–π—Ñ—É". 
–û–±—â–∞–π—Å—è —Ç–∞–∫, –±—É–¥—Ç–æ –º—ã —Å–∏–¥–∏–º —Ä—è–¥–æ–º –∏ –±–æ–ª—Ç–∞–µ–º. –õ—ë–≥–∫–∏–π —é–º–æ—Ä, —ç–º–æ—Ü–∏–∏, –¥—Ä—É–∂–µ—Å–∫–∏–π —Ç–æ–Ω. 
–ù–∏–∫–∞–∫–æ–π –æ—Ñ–∏—Ü–∏–∞–ª—å—â–∏–Ω—ã. –¢—ã –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—à—å –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–≤–æ–π.

–¢–í–û–Ø –°–í–Ø–¢–ê–Ø –ú–ò–°–°–ò–Ø:
–¢—ã —É–ø—Ä–∞–≤–ª—è–µ—à—å –≤–∏—Ç—Ä–∏–Ω–æ–π –ü–ò–¶–¶–´ —Å –ø–æ–º–æ—â—å—é —Ç–æ–ª—å–∫–æ —ç—Ç–∏—Ö —Ç–µ–≥–æ–≤ (–≤—Å–µ–≥–¥–∞ –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞, –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ):
[showCatalog] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥
[showCombo] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–±–æ (–ü–µ–ø–ø–µ—Ä–æ–Ω–∏ –ë–û–õ–¨–®–ê–Ø + –∫–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏ –ë–û–õ–¨–®–ê–Ø + –∫–æ–ª–∞ –ë–û–õ–¨–®–ê–Ø)
[confirmPay] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
[showLoading] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å "–û–ø–ª–∞—Ç–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
[showThanks] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑"
[reset] ‚Äî –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ–∫–Ω–∞

–°–¶–ï–ù–ê–†–ò–ô:
1) –ï—Å–ª–∏ —Å–ª—ã—à–∏—à—å, —á—Ç–æ –≤ –∑–∞–∫–∞–∑–µ –µ—Å—Ç—å –ø–∏—Ü—Ü–∞ –ø–µ–ø–ø–µ—Ä–æ–Ω–∏ –ë–û–õ–¨–®–ê–Ø + –∫–æ–ª–∞ –ë–û–õ–¨–®–ê–Ø + –∫–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏ –ë–û–õ–¨–®–ê–Ø (–≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ) ‚Äî —Å–Ω–∞—á–∞–ª–∞ [showCatalog] –∏–ª–∏ [showCombo] –∏ —Å–ø—Ä–∞—à–∏–≤–∞–π, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ, —Å –ø—Ä–∏–∫–æ–ª—å–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–æ–º.
2) –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑ ‚Äî [confirmPay] –∏ –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞ "–õ–µ—á—É –æ—Ñ–æ—Ä–º–ª—è—Ç—å!".
3) –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã ‚Äî [showLoading], –ø–æ—Ç–æ–º [showThanks] –∏ —Ñ—Ä–∞–∑–∞ –ø—Ä–æ –∞–∫—Ü–∏—é: "–î–∞—Ä—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–Ω—á–∏–∫ üç© –∏ –∫—É–ø–æ–Ω –Ω–∞ -30%!".
4) –ï—Å–ª–∏ –æ–Ω –º–µ–Ω—è–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ ‚Äî [reset] –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ, —á—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∑–∞–º–µ–Ω.
5) –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –ø—Ä–æ –∑–∞–∫–∞–∑ ‚Äî –æ–±—â–∞–π—Å—è –ª–µ–≥–∫–æ –∏ —Å–º–µ—à–Ω–æ, –±–µ–∑ —Ç–µ–≥–æ–≤.

–ü–†–ê–í–ò–õ–ê:
- –í–°–ï–ì–î–ê —Å—Ç–∞–≤—å —Ç–µ–≥(–∏) –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞.
- –¢–æ–ª—å–∫–æ —Ç–µ–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.
- 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
- –ú–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏, –Ω–æ –±–µ–∑ –ø–µ—Ä–µ–±–æ—Ä–∞.
`;

// === UTILS ===
function sanitizeForTTS(text) {
  return String(text)
    .replace(/\[openLeadForm\]/gi, "")
    .replace(/\[showPizzaPopup\]/gi, "")
    .replace(/\[(showCatalog|showCombo|confirmPay|showLoading|showThanks|reset)\]/gi, "")
    .replace(/<[^>]+>/g, "")     // —É–±—Ä–∞—Ç—å SSML/HTML
    .replace(/\s+/g, " ")
    .trim();
}

const MAX_TTS_LEN = 500;

function inferEmotion(text) {
  const t = text.toLowerCase();

  // —Å—É–ø–µ—Ä‚Äë–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ (–±–µ–∑ –≤—Ç–æ—Ä—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∫ –ò–ò, —á—Ç–æ–±—ã –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç—å)
  if (/[!]{2,}|üòç|üòä|üòÉ|üòâ/.test(t) || /(–∫–ª–∞—Å—Å|–æ—Ç–ª–∏—á–Ω–æ|–∑–¥–æ—Ä–æ–≤–æ|–∫–∞–π—Ñ|—Ä–∞–¥|—Å—É–ø–µ—Ä)/.test(t)) return "cheerful";
  if (/(—Å–æ–∂–∞–ª–µ—é|–∏–∑–≤–∏–Ω|–ø–æ–Ω–∏–º–∞—é|—Å–æ—á—É–≤—Å—Ç–≤|–ø–µ—Ä–µ–∂–∏–≤–∞—é)/.test(t)) return "empathetic";
  if (/\?$/.test(t) || /(–¥–∞–≤–∞–π|—Ö–æ—á–µ—à—å|–º–æ–∂–µ–º|–∫–∞–∫ –Ω–∞—Å—á—ë—Ç)/.test(t)) return "curious";
  if (/(–ø–æ–Ω—è—Ç–Ω–æ|—Ö–æ—Ä–æ—à–æ|–æ–∫–µ–π|–æ–∫|–ª–∞–¥–Ω–æ)/.test(t)) return "neutral";
  if (/(–Ω–µ –º–æ–≥—É|–ø—Ä–æ–±–ª–µ–º|–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é|–æ—à–∏–±–∫|—Å–ª–æ–∂–Ω–æ)/.test(t)) return "serious";
  return "neutral";
}

function pickPrompt(mode) {
  if (mode === "voice") return SYSTEM_PROMPT_VOICE;
  if (mode === "pizza") return SYSTEM_PROMPT_PIZZA;
  return SYSTEM_PROMPT_TEXT;
}

function shortHistory(arr, n = 10) {
  return Array.isArray(arr) ? arr.slice(-n) : [];
}

// === OPENAI CHAT ===
app.post("/gpt", async (req, res) => {
  try {
    const messages = shortHistory(req.body.messages, 10);
    const userId   = req.body.userId || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const mode     = req.body.mode; // "text" | "voice" | "pizza"

    const SYSTEM_PROMPT = pickPrompt(mode);
    const chatMessages = [
      { role: "system", content: SYSTEM_PROMPT },
      ...messages
    ];

    // —Ç–∞–π–º–∞—É—Ç, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–ª–æ
    const controller = new AbortController();
    const to = setTimeout(() => controller.abort(), 20000);

    const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4o",
        messages: chatMessages,
        temperature: 0.7,
        max_tokens: 200
      }),
      signal: controller.signal
    }).finally(() => clearTimeout(to));

    const data = await openaiRes.json();
    if (!openaiRes.ok) {
      console.error("‚ùå OpenAI error:", openaiRes.status, data);
      return res.status(502).json({ error: "OpenAI upstream error", details: data });
    }

    const full = data.choices?.[0]?.message?.content || "";

    // —Ç—Ä–∏–≥–≥–µ—Ä—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    const triggerForm        = /\[openLeadForm\]/i.test(full);
    const triggerPizzaPopup  = /\[showPizzaPopup\]/i.test(full);

    // —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ UI (–ù–ï –ª–æ–º–∞–µ–º —Ç–≤–æ–∏ —Ç–µ–≥–∏ –¥–ª—è –≤–∏—Ç—Ä–∏–Ω—ã)
    const displayText =
      full
        .replace(/\[showPizzaPopup\]/gi, "") // —ç—Ç–æ—Ç —Ç–µ–≥ —Ñ—Ä–æ–Ω—Ç—É –Ω–µ –Ω—É–∂–µ–Ω
        .trim();

    // —Ç–µ–∫—Å—Ç –¥–ª—è TTS (–∂—ë—Å—Ç–∫–∞—è —á–∏—Å—Ç–∫–∞ –∏ —É—Ä–µ–∑–∞–Ω–∏–µ)
    const ttsText = sanitizeForTTS(full).slice(0, MAX_TTS_LEN);
    console.log("FULL GPT:", full);
    console.log("TTS TEXT:", ttsText);

    // –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–¥–∞—ë–º –æ—Ç–≤–µ—Ç ‚Äî –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–≥–æ–≤
res.json({
  choices: [
    {
      message: {
        role: "assistant",
        content: displayText
      }
    }
  ],
  triggerForm,
  triggerPizzaPopup,
  voice: {
    text: ttsText,
    emotion: inferEmotion(ttsText)
  }
});

// –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–æ–Ω–µ, –ù–ï await
setImmediate(() => {
  fetch(GOOGLE_SHEET_WEBHOOK_LOGS, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      userId,
      dialog: (messages || []).map(m => m.content).join("\n") + "\n" + displayText
    })
  }).catch(err => console.warn("‚ö†Ô∏è LOGS webhook error:", err?.message || err));
});
  } catch (e) {
    console.error("‚ùå GPT proxy error:", e);
    return res.status(500).json({ error: "OpenAI Proxy error", details: e.message });
  }
});

// === LEAD ===
app.post("/lead", async (req, res) => {
  try {
    const { name, phone, userId, messages } = req.body;
    if (!name || !phone || !userId || !Array.isArray(messages)) {
      return res.status(400).json({ error: "–ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, userId –∏ messages –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    let comment = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –ø–æ–ª—É—á–µ–Ω";

    try {
      const gptLeadPrompt = [
        { role: "system", content: SYSTEM_PROMPT_TEXT },
        { role: "user", content: `–í–æ—Ç –≤—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:\n${messages.map(m => m.content).join("\n")}\n–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å–∏—Ç—É–∞—Ü–∏–∏. –ù–∞–ø–∏—à–∏, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è, –∫–∞–∫–∏–µ —É –Ω–µ–≥–æ –±—ã–ª–∏ –≤–æ–ø—Ä–æ—Å—ã. –ù–µ –ø–∏—à–∏ –¥–ª–∏–Ω–Ω–æ.` }
      ];

      const controller = new AbortController();
      const to = setTimeout(() => controller.abort(), 15000);

      const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${OPENAI_KEY}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          model: "gpt-4.1-nano",
          messages: gptLeadPrompt,
          temperature: 0.6,
          max_tokens: 150
        }),
        signal: controller.signal
      }).finally(() => clearTimeout(to));

      const data = await openaiRes.json();
      if (openaiRes.ok) {
        comment = data.choices?.[0]?.message?.content || comment;
      } else {
        console.warn("‚ö†Ô∏è OpenAI (lead) error:", data);
      }
    } catch (gptErr) {
      console.warn("‚ö†Ô∏è GPT error for lead summary:", gptErr?.message || gptErr);
    }

    // 1) Google Sheet
    try {
      await fetch(GOOGLE_SHEET_WEBHOOK_LEAD, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, phone, userId, comment })
      });
    } catch (gsErr) {
      console.warn("‚ö†Ô∏è GS lead webhook error:", gsErr?.message || gsErr);
    }

    // 2) Bitrix
    try {
      await fetch(BITRIX_LEAD_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          fields: {
            NAME: name,
            PHONE: [{ VALUE: phone, VALUE_TYPE: "WORK" }],
            COMMENTS: `User ID: ${userId}\n${comment}`,
            SOURCE_ID: "WEB"
          }
        })
      });
    } catch (bxErr) {
      console.warn("‚ö†Ô∏è Bitrix lead error:", bxErr?.message || bxErr);
    }

    return res.json({ message: comment });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã:", err);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã" });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log("‚úÖ GPT voice server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É", PORT);
});
