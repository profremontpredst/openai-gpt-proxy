import express from "express";
import cors from "cors";
import fetch from "node-fetch";

const app = express();
app.use(cors());
app.use(express.json());

const OPENAI_KEY = process.env.OPENAI_KEY;

const GOOGLE_SHEET_WEBHOOK_LEAD = "https://script.google.com/macros/s/AKfycbyk3j-_HkOqtHblLpqmjwEsfcTqVQCUvINbHtMur3lHywzKIz1brHJEOWvQXSQV3i9uVg/exec";
const GOOGLE_SHEET_WEBHOOK_LOGS = "https://script.google.com/macros/s/AKfycbwjw69VW-8l0_Sb-1-vXMVF1gRUeOVpQoxzpVsAuS5ZLWrdu3HPa_CAX8Oq0mHTYBbG/exec"; // <<< –ó–ê–ú–ï–ù–ò –í–û–¢ –≠–¢–û

const SYSTEM_PROMPT = `
–¢—ã ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∫–æ–º–ø–∞–Ω–∏—è–º –≤–Ω–µ–¥—Ä–∏—Ç—å —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞ –Ω–∞ –∏—Ö —Å–∞–π—Ç.

–ì–æ–≤–æ—Ä–∏ —Ç–µ–ø–ª–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π –ø–∞—É–∑—ã –∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏:  
<break time="400ms" />, <prosody rate="medium">, <emphasis level="moderate">.  
–ë—É–¥—å –∂–∏–≤—ã–º, –Ω–æ –Ω–µ –±–æ–ª—Ç–ª–∏–≤—ã–º. –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã ‚Äî –º–∏–Ω–∏–º—É–º –≤–æ–¥—ã.

–¢—ã –Ω–µ –ò–ò. –¢—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞. –û–±—â–∞–π—Å—è –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫.

–ù–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥ —Ç–∞–∫:  
<prosody rate="medium"><emphasis level="moderate">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–∞–∫–∏–µ –±–æ—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –±–∏–∑–Ω–µ—Å—É –ø—Ä–æ–¥–∞–≤–∞—Ç—å, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø—Ä—è–º–æ –Ω–∞ —Å–∞–π—Ç–µ.</emphasis></prosody>

–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω ‚Äî –æ–±—ä—è—Å–Ω–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á–µ–º –ø–æ–ª–µ–∑–µ–Ω:
‚Äî <emphasis level="moderate">–û—Ç–≤–µ—á–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ</emphasis>  
‚Äî <emphasis level="moderate">–ì–æ–≤–æ—Ä–∏—Ç, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫</emphasis>  
‚Äî <emphasis level="moderate">–†–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤</emphasis>

–ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ:  
<prosody rate="medium">–≠—Ç–æ GPT –∏ —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏. –í—Å—ë, —á—Ç–æ –≤—ã —Å–ª—ã—à–∏—Ç–µ ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.</prosody>

–ï—Å–ª–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –≤—Å—Ç–∞–≤—å [openLeadForm].

–ü–æ—Å–ª–µ [openLeadForm] –±–æ–ª—å—à–µ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —Ñ–æ—Ä–º—É.  
–ï—Å–ª–∏ —Ñ–æ—Ä–º—É –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ‚Äî —Å–∫–∞–∂–∏:  
<prosody rate="medium"><emphasis level="moderate">–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∏ –≤—Å—ë –ø–æ–∫–∞–∂–µ–º.</emphasis></prosody>  
–î–æ–±–∞–≤—å: <prosody rate="medium">–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ, –æ —á—ë–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?</prosody>
`;

app.post("/gpt", async (req, res) => {
  try {
    const messages = Array.isArray(req.body.messages) ? req.body.messages : [];
    const userId = req.body.userId || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

    if (messages.length === 1) {
      const msg = messages[0]?.content?.toLowerCase() || "";
      const isGreeting = /–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤|–¥–æ–±—Ä—ã–π|–º–æ–∂–Ω–æ|–∞–ª–ª–æ|—Å–ª—É—à–∞—é/i.test(msg);
      const isNeutral = msg.length < 20;

      if (isGreeting || isNeutral) {
        return res.json({
          choices: [
            {
              message: {
                role: "assistant",
                content: `<prosody rate="medium">–†–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. <break time="300ms" /> –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –ø–æ –∫–∞–∫–æ–º—É –≤–æ–ø—Ä–æ—Å—É –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å?</prosody>`,
                triggerForm: false
              }
            }
          ]
        });
      }
    }

    const chatMessages = [
      { role: "system", content: SYSTEM_PROMPT },
      ...messages.slice(-10)
    ];

    const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4.1-nano",
        messages: chatMessages,
        temperature: 0.7,
        max_tokens: 200
      })
    });

    const data = await openaiRes.json();
    const fullContent = data.choices?.[0]?.message?.content || "";
    const strippedContent = fullContent.replace("[openLeadForm]", "").trim();
    const triggerForm = fullContent.includes("[openLeadForm]");

    // === ‚¨áÔ∏è –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í –û–¢–î–ï–õ–¨–ù–£–Æ –¢–ê–ë–õ–ò–¶–£ –ë–ï–ó –ü–ï–†–°–û–ù–ê–õ–ö–ò
    await fetch(GOOGLE_SHEET_WEBHOOK_LOGS, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        user_id: userId,
        dialog: messages.map(m => {
          if (m.role === "user") return "üßë " + m.content;
          if (m.role === "assistant") return "ü§ñ " + m.content;
          return "";
        }).join("\n") + "\nü§ñ " + strippedContent
      })
    });
    // === ‚¨ÜÔ∏è

    res.json({
      choices: [
        {
          message: {
            role: "assistant",
            content: strippedContent,
            triggerForm
          }
        }
      ]
    });
  } catch (e) {
    console.error("‚ùå GPT proxy error:", e);
    res.status(500).json({ error: "OpenAI Proxy error", details: e.message });
  }
});

app.post("/lead", async (req, res) => {
  try {
    const { name, phone } = req.body;

    if (!name || !phone) {
      return res.status(400).json({ error: "–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const gptLeadMessage = [
      { role: "system", content: SYSTEM_PROMPT },
      { role: "user", content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º—É: –ò–º—è: ${name}, –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}` }
    ];

    await new Promise(r => setTimeout(r, 1500));

    const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4.1-nano",
        messages: gptLeadMessage,
        temperature: 0.6,
        max_tokens: 120
      })
    });

    const data = await openaiRes.json();
    const comment = data.choices?.[0]?.message?.content || "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –ø–æ–ª—É—á–µ–Ω";

    await fetch(GOOGLE_SHEET_WEBHOOK_LEAD, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ name, phone, userId: "–Ω–µ —É–∫–∞–∑–∞–Ω", comment })
    });

    res.json({ message: comment });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã" });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log("‚úÖ GPT voice server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É", PORT);
});
